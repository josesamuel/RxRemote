/**
 * <p>
 * <b>RxRemote</b> extends the power of Rx Observables across android process. 
 * </p>
 * <br/>
 * 
 * <br/>
 * Example (using <a href=\"https://bit.ly/Remoter\">Remoter</a> interface)
 * <br/>
 * <pre><code>
 *
 * {@literal @}Remoter
 *  public interface ISampleService {
 *	    //Define a remote method that returns a RemoteObservable{@literal <}String{@literal >}
 *		RemoteObservable{@literal <}String{@literal >} getStateObservable();
 * }
 * </code></pre>
 *
 * <p>
 *     At the <b>service</b> side :
 *<pre><code>
 *          
 * //Controller to send events to cient
 * RemoteEventController{@literal <}String{@literal >}  eventController = new RemoteEventController<>();
 * 
 *  public RemoteObservable{@literal <}String{@literal >}  getStateObservable() {
 *		//wrap the controller and return
 *		return new RemoteObservable<>(eventController);
 *	}	
 *      	
 *      	...
 *      	...
 *      	
 *      	//send the events
 *      	eventController.sendEvent("Idle");
 *      	eventController.sendEvent("Active");
 *      	...
 *      	//complete
 *      	eventController.sendCompleted();
 *</code></pre>
 * </p>
 * <br/>
 * or Use Factory class RemoteObservables to create/notify
 *<pre><code>
 *
 *
 *  public RemoteObservable{@literal <}String{@literal >}  getStateObservable() {
 *		//Use the factory tied to "State"
 *		return RemoteObservables.{@literal <}String{@literal >} of("State").newObservable();
 *	}
 *
 *  //Notify update
 *  RemoteObservables.{@literal <}String{@literal >} of("State").onNext("Idle");
 *
 *<pre><code> *
 * or, simply return a RemoteObservable wrapping your source Observable. Any events generated by the source Observable are delivered remotely
 *
 *<pre><code>
 *
 *
 *  public RemoteObservable{@literal <}String{@literal >}  getStateObservable() {
 *		//wrap your observable with a RemoteObservable to return across Binder
 *		return new RemoteObservable<>(Observable.from(new String[]{"Idle"});
 *	}
 *<pre><code>
 *
 * <p>
 *     At the <b>client</b> side :
 *     <br/>
 *     <br/>
 *     Get the RxJava Observable from RemoteObervable that you get from remote service.
 *<pre><code>
 * ISampleService sampleService = new ISampleService_Proxy( binder ); //See remoter
 * Observable{@literal <}String{@literal >}  stateObservable = sampleService.getStateObservable().getObservable();
 *</code></pre>
 * </p>
 * <br/>
 *
 * or, simply get the Data directly from the RemoteObservable
 *<pre><code>
 * ISampleService sampleService = new ISampleService_Proxy( binder ); //See remoter
 * RemoteObservable{@literal <}String{@literal >}  remoteObservable = sampleService.getStateObservable();
 * remoteObservable.getData(); //Get the last data
 * //Listen for updates
 * remoteObservable.setDataListener(data -> {
 *
 *        });
 *</code></pre>
 *
 *
 * <p>
 * To add RxRemote to your project add these to its gradle <b>dependencies</b>:
 * <br/>
 * <br/>
 *  <b>implementation 'com.josesamuel:rxremote:2.0.3â€™</b>
 * <br/><br/>
 * </p>
 * <br/>
 *
 */
package io.reactivex.remote;
